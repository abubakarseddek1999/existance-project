{"version":3,"file":"static/js/7373.4907b292.chunk.js","mappings":"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","sources":["components/PageTitle.tsx","components/FileUploader.tsx","pages/forms/FileUpload.tsx"],"sourcesContent":["import React from \"react\";\nimport { Row, Col, Breadcrumb } from \"react-bootstrap\";\n\ninterface BreadcrumbItems {\n  label: string;\n  path: string;\n  active?: boolean;\n}\n\ninterface PageTitleProps {\n  breadCrumbItems: Array<BreadcrumbItems>;\n  title: string;\n}\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps) => {\n  return (\n    <Row>\n      <Col>\n        <div className=\"page-title-box\">\n          <h4 className=\"page-title\">{props.title}</h4>\n          <div className=\"page-title-right\">\n            <Breadcrumb listProps={{ className: \"m-0 flex-col\" }}>\n              <Breadcrumb.Item href=\"/\">Shreyu</Breadcrumb.Item>\n\n              {(props.breadCrumbItems || []).map((item, index) => {\n                return item.active ? (\n                  <Breadcrumb.Item active key={index}>\n                    {item.label}\n                  </Breadcrumb.Item>\n                ) : (\n                  <Breadcrumb.Item key={index} href={item.path}>\n                    {item.label}\n                  </Breadcrumb.Item>\n                );\n              })}\n            </Breadcrumb>\n          </div>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nexport default PageTitle;\n","import React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport Dropzone from \"react-dropzone\";\nimport classNames from \"classnames\";\n\ninterface FileType extends File {\n  preview?: string;\n  formattedSize?: string;\n}\n\ninterface FileUploaderProps {\n  onFileUpload?: (files: FileType[]) => void;\n  showPreview?: boolean;\n}\n\nconst FileUploader = (props: FileUploaderProps) => {\n  const [selectedFiles, setSelectedFiles] = useState<FileType[]>([]);\n\n  /**\n   * Handled the accepted files and shows the preview\n   */\n  const handleAcceptedFiles = (files: FileType[]) => {\n    var allFiles = files;\n\n    if (props.showPreview) {\n      (files || []).map((file) =>\n        Object.assign(file, {\n          preview:\n            file[\"type\"].split(\"/\")[0] === \"image\"\n              ? URL.createObjectURL(file)\n              : null,\n          formattedSize: formatBytes(file.size),\n        })\n      );\n      allFiles = [...selectedFiles];\n      allFiles.push(...files);\n      setSelectedFiles(allFiles);\n    }\n\n    if (props.onFileUpload) props.onFileUpload(allFiles);\n  };\n\n  /**\n   * Formats the size\n   */\n  const formatBytes = (bytes: number, decimals: number = 2) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n  };\n\n  /*\n   * Removes the selected file\n   */\n  const removeFile = (e: any, fileIndex: number) => {\n    const newFiles = [...selectedFiles];\n    newFiles.splice(fileIndex, 1);\n    setSelectedFiles(newFiles);\n    if (props.onFileUpload) props.onFileUpload(newFiles);\n  };\n\n  return (\n    <>\n      <Dropzone\n        {...props}\n        onDrop={(acceptedFiles) => handleAcceptedFiles(acceptedFiles)}\n      >\n        {({ getRootProps, getInputProps }) => (\n          <div\n            className={classNames(\"dropzone\", \"dz-clickable\", {\n              \"dz-started\": selectedFiles && selectedFiles.length > 0,\n            })}\n          >\n            <div {...getRootProps()}>\n              <div className=\"dz-message needsclick\">\n                <input {...getInputProps()} />\n                <i className=\"h1 text-muted uil-cloud-upload\"></i>\n                <h3>Drop files here or click to upload.</h3>\n                <span className=\"text-muted \">\n                  (This is just a demo dropzone. Selected files are{\" \"}\n                  <strong>not</strong> actually uploaded.)\n                </span>\n              </div>\n              {props.showPreview &&\n                (selectedFiles || []).map((f, i) => {\n                  return (\n                    <React.Fragment key={i}>\n                      {f.preview && (\n                        <div\n                          onClick={(e) => e.stopPropagation()}\n                          className=\"dz-preview dz-processing dz-error dz-complete dz-image-preview\"\n                        >\n                          <div className=\"dz-image\">\n                            <img\n                              key={i}\n                              data-dz-thumbnail=\"\"\n                              alt={f.name}\n                              src={f.preview}\n                            />\n                          </div>\n\n                          <div className=\"dz-details\">\n                            <div className=\"dz-size\">\n                              <span data-dz-size=\"\">\n                                <strong>{f.formattedSize}</strong> KB\n                              </span>\n                            </div>\n                            <div className=\"dz-filename\">\n                              <span data-dz-name=\"\">{f.name}</span>\n                            </div>\n                          </div>\n\n                          <div className=\"dz-remove\">\n                            <Button\n                              variant=\"\"\n                              onClick={(e) => removeFile(e, i)}\n                            >\n                              <i className=\"uil uil-multiply\"></i>\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n                      {!f.preview && (\n                        <div\n                          onClick={(e) => e.stopPropagation()}\n                          className=\"dz-preview dz-file-preview dz-processing dz-error dz-complete\"\n                        >\n                          <div className=\"dz-image\">\n                            <img data-dz-thumbnail=\"\" alt=\"\" />\n                          </div>\n                          <div className=\"dz-details\">\n                            <div className=\"dz-size\">\n                              <span data-dz-size=\"\">\n                                <strong>{f.formattedSize}</strong> KB\n                              </span>\n                            </div>\n                            <div className=\"dz-filename\">\n                              <span data-dz-name=\"\">{f.name}</span>\n                            </div>\n                          </div>\n\n                          <div className=\"dz-remove\">\n                            <Button\n                              variant=\"\"\n                              onClick={(e) => removeFile(e, i)}\n                            >\n                              <i className=\"uil uil-multiply\"></i>\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n                    </React.Fragment>\n                  );\n                })}\n            </div>\n          </div>\n        )}\n      </Dropzone>\n    </>\n  );\n};\n\nFileUploader.defaultProps = {\n  showPreview: true,\n};\n\nexport default FileUploader;\n","import React from \"react\";\nimport { Row, Col, Card, Button } from \"react-bootstrap\";\n\n// components\nimport PageTitle from \"../../components/PageTitle\";\nimport FileUploader from \"../../components/FileUploader\";\n\nconst FileUpload = () => {\n  return (\n    <React.Fragment>\n      <PageTitle\n        breadCrumbItems={[\n          { label: \"Forms\", path: \"/forms/upload\" },\n          { label: \"File Upload\", path: \"/forms/upload\", active: true },\n        ]}\n        title={\"File Upload\"}\n      />\n\n      <Row>\n        <Col xs={12}>\n          <Card>\n            <Card.Body>\n              <h4 className=\"header-title mt-0 mb-1\">Dropzone File Upload</h4>\n              <p className=\"sub-header\">\n                DropzoneJS is an open source library that provides drag’n’drop\n                file uploads with image previews.\n              </p>\n\n              <FileUploader\n                onFileUpload={(files) => {\n                  console.log(\"Uploaded files - \", files);\n                }}\n              />\n\n              <div className=\"clearfix text-end mt-3\">\n                <Button variant=\"danger\">\n                  <i className=\"uil uil-arrow-right me-1\"></i> Submit\n                </Button>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nexport default FileUpload;\n"],"names":["props","_jsx","Row","children","Col","_jsxs","className","title","Breadcrumb","listProps","href","breadCrumbItems","map","item","index","active","label","path","FileUploader","_useState","useState","_useState2","_slicedToArray","selectedFiles","setSelectedFiles","formatBytes","bytes","decimals","arguments","length","undefined","dm","i","Math","floor","log","parseFloat","pow","toFixed","removeFile","e","fileIndex","newFiles","_toConsumableArray","splice","onFileUpload","_Fragment","Dropzone","_objectSpread","onDrop","acceptedFiles","files","_allFiles","allFiles","showPreview","file","Object","assign","preview","split","URL","createObjectURL","formattedSize","size","push","apply","handleAcceptedFiles","_ref","getRootProps","getInputProps","classNames","f","React","onClick","stopPropagation","alt","name","src","Button","variant","defaultProps","PageTitle","xs","Card","console"],"sourceRoot":""}